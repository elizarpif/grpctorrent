syntax = "proto3";

package api;
option go_package = ":;api";

import "google/protobuf/empty.proto";

message UploadFileRequest {
  string client_id = 1;
  string name = 2; // имя файла
  uint64 piece_length = 3; // длина кусочка
  uint64 pieces = 4; // всего кусочков
  uint64 length = 5; // длина файла
  string hash = 6 ; // хэш файла
}

message GetPeersRequest {
  string hash_file = 1; // хэш файла - файл который надо скачать
  string peer_id = 2; // сгенерированный uuid клиента - его пир
}

message ListPeers {
  uint64 count = 1;

  message Peer {
    string address = 1; // summary address

    repeated uint64 serial_pieces = 2;  // номера доступных кусочков
  }

  repeated Peer peers = 2;
}

message PiecesInfo {
  string hash_file = 1;
  repeated uint64 serial_pieces = 2; // кусочки которые уже скачаны и раздаются
  bool all_file = 3; // весь файл или нет
}

service Tracker {
  rpc Upload (UploadFileRequest) returns (google.protobuf.Empty); // загрузить торрент-файл на сервер
  rpc GetPeers (GetPeersRequest) returns (ListPeers); // заявить о себе и получить список пиров
  rpc PostPiecesInfo (PiecesInfo) returns (google.protobuf.Empty); // сообщить информацию о файловых кусочках которые клиент уже скачал и раздает
}

//enum MessageType {
//  INTERESTED = 0;
//  NOT_INTERSTED = 1;
//  HAVE = 2;
//  PIECE = 3;
//  CANCEL = 4;
//}
//
//message TorrentMessage {
//  uint64 length = 1; // длина
//  MessageType type = 2; // тип сообщения
//  string payload = 3;
//}

message Piece {
  string payload = 1; // кусочек
  uint64 serial_number = 2; // номер кусочка
}

message GetPieceRequest {
  uint64 serial_number = 1;
  string hash = 2;
}

service Peer {
  rpc GetPiece(GetPieceRequest) returns (Piece);
}