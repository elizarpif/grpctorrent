syntax = "proto3";

package api;
option go_package = ":;api";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

message UploadFileRequest {
  string client_id = 1;
  string name = 2; // имя файла
  uint64 piece_length = 3; // длина кусочка
  uint64 pieces = 4; // всего кусочков
  uint64 length = 5; // длина файла
  string hash = 6 ; // хэш файла
}

message GetPeersRequest {
  string hash_file = 1; // хэш файла - файл который надо скачать
  string peer_id = 2; // сгенерированный uuid клиента - его пир
}

message ListPeers {
  uint64 count = 1;

  message Peer {
    string address = 1; // summary address

    repeated uint64 serial_pieces = 2;  // номера доступных кусочков
  }

  repeated Peer peers = 2;
}

message PieceInfo {
  string hash_file = 1;
  uint64 serial = 2; // кусочек который скачан и раздается
}

message AllPiecesDownload {
  string hash = 1;
}

message DownloadFileRequest {
  string hash = 1;
}

message FileInfo {
  string name = 1; // имя файла
  uint64 piece_length = 2; // длина кусочка
  uint64 pieces = 3; // всего кусочков
  uint64 length = 4; // длина файла
  string hash = 5 ; // хэш файла
}

service Tracker {
  rpc GetFileInfo(DownloadFileRequest) returns (FileInfo);
  rpc Upload (UploadFileRequest) returns (google.protobuf.Empty); // загрузить торрент-файл на сервер
  rpc GetPeers (GetPeersRequest) returns (ListPeers); // заявить о себе и получить список пиров
  rpc PostPieceInfo (PieceInfo) returns (google.protobuf.Empty); // сообщить информацию о файловых кусочках которые клиент уже скачал и раздает
}

message Piece {
  string payload = 1; // кусочек
  uint64 serial_number = 2; // номер кусочка
}

message GetPieceRequest {
  uint64 serial_number = 1;
  string hash = 2;
}

message File {
  string name = 1;
}

service Peer {
  rpc GetPiece(GetPieceRequest) returns (Piece);

  rpc UploadFile(File) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/upload"
      body: "*"
    };
  }

  rpc GetLocalFileInfo(File) returns (FileInfo){
    option (google.api.http) = {
      get: "/files/{name}"
    };
  }

  rpc Download(DownloadFileRequest) returns (FileInfo){
    option (google.api.http) = {
      post: "/download"
      body: "*"
    };
  }
}